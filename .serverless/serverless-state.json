{
  "service": {
    "service": "advenrent-api",
    "serviceObject": {
      "name": "advenrent-api"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "stage": "dev",
      "region": "us-east-1",
      "environment": {
        "DB_HOST": "advenrent-instance-1.cabwqitbdsrq.us-east-1.rds.amazonaws.com",
        "DB_PORT": "5432",
        "DB_NAME": "powersports",
        "DB_USER": "postgres",
        "DB_PASSWORD": "Rent2017%24",
        "JWT_SECRET": "jwt_dev_secret",
        "STRIPE_SECRET_KEY": "sk_test_stripekey",
        "STRIPE_WEBHOOK_SECRET": "whsec_dev_webhook",
        "CORS_ORIGIN": "http://localhost:8081",
        "PORT": "5000",
        "NODE_ENV": "development",
        "TEST_ENV_CONFIRMATION": "bolt_is_using_this_file"
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "ApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/advenrent-api-dev-api"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "advenrent-api",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/advenrent-api-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/advenrent-api-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "advenrent-api",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "ApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/advenrent-api/dev/1743203086788-2025-03-28T23:04:46.788Z/api.zip"
              },
              "Handler": "handler.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "advenrent-api-dev-api",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_HOST": "advenrent-instance-1.cabwqitbdsrq.us-east-1.rds.amazonaws.com",
                  "DB_PORT": "5432",
                  "DB_NAME": "powersports",
                  "DB_USER": "postgres",
                  "DB_PASSWORD": "Rent2017%24",
                  "JWT_SECRET": "jwt_dev_secret",
                  "STRIPE_SECRET_KEY": "sk_test_stripekey",
                  "STRIPE_WEBHOOK_SECRET": "whsec_dev_webhook",
                  "CORS_ORIGIN": "http://localhost:8081",
                  "PORT": "5000",
                  "NODE_ENV": "development",
                  "TEST_ENV_CONFIRMATION": "bolt_is_using_this_file"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ApiLogGroup"
            ]
          },
          "ApiLambdaVersionijkIx0kLATw1KEK9b5xjyATQ0IpmHyXjFmxZqOeu8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ApiLambdaFunction"
              },
              "CodeSha256": "Ei0uxY2Es3axW3pjPTrFmTbNAP/QiSBVk3QWviXmRdU="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-advenrent-api",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProxyVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,GET,HEAD,PATCH,POST,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProxyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ApiLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1743203075903": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodProxyVarOptions",
              "ApiGatewayMethodProxyVarAny"
            ]
          },
          "ApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-advenrent-api-dev-ServerlessDeploymentBucketName"
            }
          },
          "ApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ApiLambdaVersionijkIx0kLATw1KEK9b5xjyATQ0IpmHyXjFmxZqOeu8"
            },
            "Export": {
              "Name": "sls-advenrent-api-dev-ApiLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-advenrent-api-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "serverless-offline": {
        "httpPort": 5000,
        "noPrependStageInUrl": true
      },
      "dotenv": {
        "path": ".env.dev",
        "logging": true,
        "debug": true,
        "include": [
          "DB_HOST",
          "DB_PORT",
          "DB_NAME",
          "DB_USER",
          "DB_PASSWORD",
          "JWT_SECRET",
          "STRIPE_SECRET_KEY",
          "STRIPE_WEBHOOK_SECRET",
          "CORS_ORIGIN"
        ],
        "exclude": [
          "NODE_ENV",
          "PORT",
          "TEST_ENV_CONFIRMATION"
        ]
      }
    },
    "plugins": [
      "serverless-offline",
      "./serverless-dotenv.js"
    ],
    "pluginsData": {},
    "functions": {
      "api": {
        "handler": "handler.handler",
        "events": [
          {
            "http": {
              "path": "{proxy+}",
              "method": "any",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "ANY"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "advenrent-api-dev-api",
        "package": {
          "artifact": "D:\\adven_rent\\.serverless\\api.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ApiLambdaVersionijkIx0kLATw1KEK9b5xjyATQ0IpmHyXjFmxZqOeu8"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "advenrent-api",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "package": {
        "individually": true,
        "patterns": [
          "package.json",
          "package-lock.json",
          "server/**",
          "config/**",
          "handler.js",
          "serverless-dotenv.js",
          ".env.dev",
          "node_modules/pg/**",
          "node_modules/express/**",
          "node_modules/cors/**",
          "node_modules/dotenv/**",
          "node_modules/jsonwebtoken/**",
          "node_modules/bcryptjs/**",
          "node_modules/stripe/**",
          "node_modules/serverless-http/**",
          "!app/**",
          "!assets/**",
          "!components/**",
          "!constants/**",
          "!hooks/**",
          "!utils/**",
          "!App.tsx",
          "!app.json",
          "!babel.config.js",
          "!tsconfig.json",
          "!metro.config.js",
          "!README.md",
          "!app.d.ts",
          "!**/node_modules/**/*.md",
          "!**/node_modules/**/*.txt",
          "!**/node_modules/**/*.d.ts",
          "!**/node_modules/**/test/**",
          "!**/node_modules/**/tests/**",
          "!**/node_modules/**/__tests__/**",
          "!**/node_modules/**/coverage/**",
          "!**/node_modules/**/.git/**",
          "!**/node_modules/**/.github/**",
          "!**/node_modules/**/.vscode/**",
          "!**/node_modules/**/.idea/**",
          "!**/node_modules/**/docs/**",
          "!**/node_modules/**/examples/**",
          "!**/node_modules/**/benchmark/**",
          "!**/node_modules/**/scripts/**",
          "!**/node_modules/**/bin/**",
          "!**/node_modules/**/dist/**",
          "!**/node_modules/**/build/**",
          "!**/node_modules/**/lib/**",
          "!**/node_modules/**/src/**",
          "!**/node_modules/**/types/**",
          "!**/node_modules/**/typings/**",
          "!**/node_modules/**/flow-typed/**",
          "!**/node_modules/**/flow/**",
          "!**/node_modules/**/ts/**",
          "!**/node_modules/**/tsconfig.json",
          "!**/node_modules/**/tsconfig.*.json",
          "!**/node_modules/**/yarn.lock",
          "!**/node_modules/**/pnpm-lock.yaml",
          "!**/node_modules/**/CHANGELOG.md",
          "!**/node_modules/**/LICENSE",
          "!**/node_modules/**/LICENSE.md",
          "!**/node_modules/**/README.md",
          "!**/node_modules/**/README",
          "!**/node_modules/**/AUTHORS",
          "!**/node_modules/**/CONTRIBUTORS",
          "!**/node_modules/**/HISTORY.md",
          "!**/node_modules/**/NOTICE",
          "!**/node_modules/**/SECURITY.md",
          "!**/node_modules/**/SUPPORT.md",
          "!**/node_modules/**/CODE_OF_CONDUCT.md",
          "!**/node_modules/**/CONTRIBUTING.md",
          "!**/node_modules/**/ISSUE_TEMPLATE/**",
          "!**/node_modules/**/PULL_REQUEST_TEMPLATE.md",
          "!**/node_modules/**/.editorconfig",
          "!**/node_modules/**/.eslintrc*",
          "!**/node_modules/**/.prettierrc*",
          "!**/node_modules/**/.stylelintrc*",
          "!**/node_modules/**/.babelrc*",
          "!**/node_modules/**/.npmrc",
          "!**/node_modules/**/.yarnrc",
          "!**/node_modules/**/.gitignore",
          "!**/node_modules/**/.gitattributes",
          "!**/node_modules/**/.travis.yml",
          "!**/node_modules/**/.circleci/**",
          "!**/node_modules/**/.github/**",
          "!**/node_modules/**/.vscode/**",
          "!**/node_modules/**/.idea/**",
          "!**/node_modules/**/.DS_Store",
          "!**/node_modules/**/Thumbs.db",
          "!**/node_modules/**/*.log",
          "!**/node_modules/**/*.lock",
          "!**/node_modules/**/*.map",
          "!**/node_modules/**/*.ts",
          "!**/node_modules/**/*.tsx",
          "!**/node_modules/**/*.jsx",
          "!**/node_modules/**/*.js.map",
          "!**/node_modules/**/*.d.ts",
          "!**/node_modules/**/*.min.js",
          "!**/node_modules/**/*.min.css",
          "!**/node_modules/**/*.min.js.map",
          "!**/node_modules/**/*.min.css.map",
          "!**/node_modules/**/*.bundle.js",
          "!**/node_modules/**/*.bundle.css",
          "!**/node_modules/**/*.bundle.js.map",
          "!**/node_modules/**/*.bundle.css.map",
          "!**/node_modules/**/*.umd.js",
          "!**/node_modules/**/*.umd.css",
          "!**/node_modules/**/*.umd.js.map",
          "!**/node_modules/**/*.umd.css.map",
          "!**/node_modules/**/*.esm.js",
          "!**/node_modules/**/*.esm.css",
          "!**/node_modules/**/*.esm.js.map",
          "!**/node_modules/**/*.esm.css.map",
          "!**/node_modules/**/*.cjs.js",
          "!**/node_modules/**/*.cjs.css",
          "!**/node_modules/**/*.cjs.js.map",
          "!**/node_modules/**/*.cjs.css.map",
          "!**/node_modules/**/*.mjs",
          "!**/node_modules/**/*.mjs.map",
          "!**/node_modules/**/*.css",
          "!**/node_modules/**/*.scss",
          "!**/node_modules/**/*.sass",
          "!**/node_modules/**/*.less",
          "!**/node_modules/**/*.styl",
          "!**/node_modules/**/*.stylus",
          "!**/node_modules/**/*.svg",
          "!**/node_modules/**/*.png",
          "!**/node_modules/**/*.jpg",
          "!**/node_modules/**/*.jpeg",
          "!**/node_modules/**/*.gif",
          "!**/node_modules/**/*.ico",
          "!**/node_modules/**/*.woff",
          "!**/node_modules/**/*.woff2",
          "!**/node_modules/**/*.ttf",
          "!**/node_modules/**/*.eot",
          "!**/node_modules/**/*.otf",
          "!**/node_modules/**/*.mp4",
          "!**/node_modules/**/*.webm",
          "!**/node_modules/**/*.ogg",
          "!**/node_modules/**/*.mp3",
          "!**/node_modules/**/*.wav",
          "!**/node_modules/**/*.flac",
          "!**/node_modules/**/*.m4a",
          "!**/node_modules/**/*.aac",
          "!**/node_modules/**/*.wma",
          "!**/node_modules/**/*.wmv",
          "!**/node_modules/**/*.avi",
          "!**/node_modules/**/*.mov",
          "!**/node_modules/**/*.flv",
          "!**/node_modules/**/*.mkv",
          "!**/node_modules/**/*.webp",
          "!**/node_modules/**/*.bmp",
          "!**/node_modules/**/*.tiff",
          "!**/node_modules/**/*.ico",
          "!**/node_modules/**/*.cur",
          "!**/node_modules/**/*.ani",
          "!**/node_modules/**/*.pdf",
          "!**/node_modules/**/*.doc",
          "!**/node_modules/**/*.docx",
          "!**/node_modules/**/*.xls",
          "!**/node_modules/**/*.xlsx",
          "!**/node_modules/**/*.ppt",
          "!**/node_modules/**/*.pptx",
          "!**/node_modules/**/*.odt",
          "!**/node_modules/**/*.ods",
          "!**/node_modules/**/*.odp",
          "!**/node_modules/**/*.rtf",
          "!**/node_modules/**/*.txt",
          "!**/node_modules/**/*.csv",
          "!**/node_modules/**/*.xml",
          "!**/node_modules/**/*.yaml",
          "!**/node_modules/**/*.yml",
          "!**/node_modules/**/*.json",
          "!**/node_modules/**/*.json5",
          "!**/node_modules/**/*.toml",
          "!**/node_modules/**/*.ini",
          "!**/node_modules/**/*.conf",
          "!**/node_modules/**/*.config",
          "!**/node_modules/**/*.properties",
          "!**/node_modules/**/*.env",
          "!**/node_modules/**/*.env.*",
          "!**/node_modules/**/*.local",
          "!**/node_modules/**/*.local.*",
          "!**/node_modules/**/*.development",
          "!**/node_modules/**/*.development.*",
          "!**/node_modules/**/*.test",
          "!**/node_modules/**/*.test.*",
          "!**/node_modules/**/*.staging",
          "!**/node_modules/**/*.staging.*",
          "!**/node_modules/**/*.production",
          "!**/node_modules/**/*.production.*",
          "!**/node_modules/**/*.debug",
          "!**/node_modules/**/*.debug.*",
          "!**/node_modules/**/*.release",
          "!**/node_modules/**/*.release.*",
          "!**/node_modules/**/*.min",
          "!**/node_modules/**/*.min.*",
          "!**/node_modules/**/*.bundle",
          "less-dotenv.js"
        ],
        "artifactsS3KeyDirname": "serverless/advenrent-api/dev/code-artifacts",
        "artifactDirectoryName": "serverless/advenrent-api/dev/1743203086788-2025-03-28T23:04:46.788Z"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/advenrent-api/dev/1743203086788-2025-03-28T23:04:46.788Z",
    "artifact": ""
  }
}